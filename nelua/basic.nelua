require 'string'

-- 3 hello world
print 'Hello world'

-- 1 type declaration
local Person = @record{
  name: string,
  age: integer
}

-- 2 there are no tagged unions, only C unions
-- so I will use a combo of enums, C unions and records to fake it ^_^
-- kinda like in TS
local UserEnum = @enum {
    LoggedIn = 0,
    Guest
}

local User = @record {
    fakeTag: UserEnum,
    data: union {
        loggedIn: record {
            name: string
        },
        guest: record {}
    }
}

function User:getName(): string
    switch self.fakeTag do
        case UserEnum.LoggedIn then
            return self.data.loggedIn.name
        case UserEnum.Guest then
            return 'guest'
        else
            return 'NOT POSSIBLE'
    end
end

local user: User = {
    UserEnum.LoggedIn,
    {loggedIn = {"Bob"}}
}

print("welcome, ", user:getName())

-- forward declaration is needed
-- 7 create function for type
function Person:haveBirthday()
  self.age = self.age + 1
end

function Person:haveBirthdayImmut(): Person
  return {name = self.name, age = self.age + 1}
end

-- metamethod for Person
function Person:__tostring()
  return 'Person {name: ' .. self.name .. ', age: ' .. self.age .. '}'
end

-- 4 creating instance of type
local person: Person = {name = "John", age = 20}


print(person) -- Person {name: John, age: 20}
person:haveBirthday()
print(person) -- Person {name: John, age: 21}


-- 8 loop
local sum = 0
for i = 1, 10 do
  sum = sum + i
end
print('The sum is', sum)
